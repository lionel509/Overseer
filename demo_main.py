from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import os
import psutil
import json
import subprocess
import asyncio
from datetime import datetime
import uvicorn

app = FastAPI(title="Overseer Demo", description="AI-Powered Ubuntu Command Interface")

# HTML template for the demo interface
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Overseer - AI Ubuntu Interface</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Courier New', monospace; 
            background: #0a0a0a; 
            color: #00ff00; 
            padding: 20px;
        }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 { color: #00ff00; font-size: 2.5em; text-shadow: 0 0 10px #00ff00; }
        .demo-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
        .panel { 
            background: #1a1a1a; 
            border: 2px solid #00ff00; 
            border-radius: 10px; 
            padding: 20px;
            box-shadow: 0 0 20px rgba(0, 255, 0, 0.3);
        }
        .panel h2 { color: #00ff00; margin-bottom: 15px; }
        .chat-area { height: 300px; overflow-y: auto; background: #000; padding: 10px; border-radius: 5px; }
        .input-group { margin-top: 10px; display: flex; }
        .input-group input { 
            flex: 1; 
            background: #333; 
            border: 1px solid #00ff00; 
            color: #00ff00; 
            padding: 10px;
        }
        .input-group button { 
            background: #00ff00; 
            color: #000; 
            border: none; 
            padding: 10px 20px; 
            cursor: pointer;
        }
        .file-list, .system-info { background: #000; padding: 10px; border-radius: 5px; height: 300px; overflow-y: auto; }
        .command-output { background: #001a00; padding: 10px; margin: 5px 0; border-left: 3px solid #00ff00; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîç OVERSEER</h1>
            <p>AI-Powered Ubuntu Command Interface - Live Demo</p>
        </div>
        
        <div class="demo-grid">
            <div class="panel">
                <h2>üí¨ AI Chat Interface</h2>
                <div id="chat-area" class="chat-area">
                    <div class="command-output">Welcome to Overseer! Try commands like:<br>
                    ‚Ä¢ "list all files"<br>
                    ‚Ä¢ "show system info"<br>
                    ‚Ä¢ "find large files"<br>
                    ‚Ä¢ "check disk usage"</div>
                </div>
                <div class="input-group">
                    <input type="text" id="user-input" placeholder="Ask me anything about the system...">
                    <button onclick="sendMessage()">Send</button>
                </div>
            </div>
            
            <div class="panel">
                <h2>üìÅ File Browser</h2>
                <div id="file-list" class="file-list">Loading files...</div>
                <button onclick="refreshFiles()" style="margin-top: 10px; background: #00ff00; color: #000; border: none; padding: 5px 10px;">Refresh</button>
            </div>
            
            <div class="panel">
                <h2>üìä System Monitor</h2>
                <div id="system-info" class="system-info">Loading system info...</div>
                <button onclick="refreshSystem()" style="margin-top: 10px; background: #00ff00; color: #000; border: none; padding: 5px 10px;">Refresh</button>
            </div>
            
            <div class="panel">
                <h2>‚ö° Generated Commands</h2>
                <div id="commands" class="system-info">
                    <div class="command-output">Commands generated by AI will appear here...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        async function sendMessage() {
            const input = document.getElementById('user-input');
            const chatArea = document.getElementById('chat-area');
            const commandsArea = document.getElementById('commands');
            
            if (!input.value.trim()) return;
            
            // Add user message
            chatArea.innerHTML += `<div class=\"command-output\">User: ${input.value}</div>`;
            
            try {
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({message: input.value})
                });
                
                const data = await response.json();
                
                // Add AI response
                chatArea.innerHTML += `<div class=\"command-output\">AI: ${data.response}</div>`;
                
                // Show generated command if available
                if (data.command) {
                    commandsArea.innerHTML += `<div class=\"command-output\">Generated: <code>${data.command}</code></div>`;
                }
                
                chatArea.scrollTop = chatArea.scrollHeight;
            } catch (error) {
                chatArea.innerHTML += `<div class=\"command-output\">Error: Could not process request</div>`;
            }
            
            input.value = '';
        }
        
        async function refreshFiles() {
            try {
                const response = await fetch('/files');
                const data = await response.json();
                const fileList = document.getElementById('file-list');
                
                fileList.innerHTML = data.files.map(file => 
                    `<div class=\"command-output\">${file.type}: ${file.name} (${file.size})</div>`
                ).join('');
            } catch (error) {
                document.getElementById('file-list').innerHTML = '<div class=\"command-output\">Error loading files</div>';
            }
        }
        
        async function refreshSystem() {
            try {
                const response = await fetch('/system');
                const data = await response.json();
                const systemInfo = document.getElementById('system-info');
                
                systemInfo.innerHTML = `
                    <div class=\"command-output\">CPU Usage: ${data.cpu_usage}%</div>
                    <div class=\"command-output\">Memory: ${data.memory_usage}%</div>
                    <div class=\"command-output\">Disk: ${data.disk_usage}%</div>
                    <div class=\"command-output\">Uptime: ${data.uptime}</div>
                    <div class=\"command-output\">Processes: ${data.processes}</div>
                `;
            } catch (error) {
                document.getElementById('system-info').innerHTML = '<div class=\"command-output\">Error loading system info</div>';
            }
        }
        
        // Enter key support
        document.getElementById('user-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') sendMessage();
        });
        
        // Auto-refresh every 5 seconds
        setInterval(refreshSystem, 5000);
        
        // Initial load
        refreshFiles();
        refreshSystem();
    </script>
</body>
</html>
"""

@app.get("/", response_class=HTMLResponse)
async def read_root():
    return HTML_TEMPLATE

@app.post("/chat")
async def chat_endpoint(request: Request):
    try:
        data = await request.json()
        user_message = data.get("message", "")
        
        # Simple AI simulation for demo
        response, command = simulate_ai_response(user_message)
        
        return JSONResponse({
            "response": response,
            "command": command,
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        return JSONResponse({
            "response": f"Error processing request: {str(e)}",
            "command": None
        })

def simulate_ai_response(message):
    """Simulate AI responses for demo purposes"""
    message_lower = message.lower()
    
    if "list" in message_lower and "file" in message_lower:
        return "I'll list the files in the current directory for you.", "ls -la"
    elif "system" in message_lower or "info" in message_lower:
        return "Here's the current system information.", "uname -a && free -h"
    elif "disk" in message_lower:
        return "Checking disk usage across the system.", "df -h"
    elif "large" in message_lower and "file" in message_lower:
        return "Finding large files in the system.", "find . -type f -size +10M -ls"
    elif "process" in message_lower:
        return "Showing running processes.", "ps aux --sort=-%cpu | head -10"
    elif "memory" in message_lower:
        return "Checking memory usage.", "free -h && ps aux --sort=-%mem | head -5"
    elif "cpu" in message_lower:
        return "Monitoring CPU usage.", "top -n 1 -b | head -20"
    elif "clean" in message_lower:
        return "I can help clean temporary files safely.", "find /tmp -type f -atime +7 -ls"
    else:
        return f"I understand you want to: '{message}'. Let me help you with that command.", f"# Processing: {message}"

@app.get("/files")
async def list_files():
    try:
        files = []
        for item in os.listdir('.'):  
            stat = os.stat(item)
            files.append({
                "name": item,
                "type": "Directory" if os.path.isdir(item) else "File",
                "size": f"{stat.st_size} bytes" if not os.path.isdir(item) else "-",
                "modified": datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M")
            })
        return {"files": files}
    except Exception as e:
        return {"files": [{"name": "Error", "type": "Error", "size": str(e), "modified": "N/A"}]}

@app.get("/system")
async def system_info():
    try:
        # Get system information
        cpu_usage = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('.')
        boot_time = psutil.boot_time()
        uptime = datetime.now().timestamp() - boot_time
        
        return {
            "cpu_usage": round(cpu_usage, 1),
            "memory_usage": round(memory.percent, 1),
            "disk_usage": round((disk.used / disk.total) * 100, 1),
            "uptime": f"{int(uptime // 3600)}h {int((uptime % 3600) // 60)}m",
            "processes": len(psutil.pids()),
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "cpu_usage": "N/A",
            "memory_usage": "N/A", 
            "disk_usage": "N/A",
            "uptime": "N/A",
            "processes": "N/A",
            "error": str(e)
        }

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "Overseer Demo", "timestamp": datetime.now().isoformat()}

if __name__ == "__main__":
    print("üîç Starting Overseer Demo Server...")
    print("üåê Demo will be available at: http://0.0.0.0:8000")
    print("‚ú® Features: AI Chat, File Browser, System Monitor")
    uvicorn.run(app, host="0.0.0.0", port=8000)